def assemble_genome(dna_list): #defines function
    """
    :type dna_list: List[str] 
    :rtype: str 
    """

    if len(dna_list)==1: #return length of list defined above
        return dna_list[0]
    dic={} #establishes dictionary
    for i in range(len(dna_list)): #relates the given list to the string code
        for j in range(len(dna_list)): #creating nested loop with the range of the length of the list
            if i!=j:
                d=0 #prevents an error message if i and j are not equal
                for k in range(1,min(len(dna_list[i]),len(dna_list[j]))): #creates range for k in terms of i and j
                    if dna_list[j][:k]==dna_list[i][-k:]: 
                        d=k 
                dic[(i,j)]=d
    if max(dic.values())==0:
        return "".join(dna_list) #prevents error for if equal to zero
    else:
        string="".join(dna_list) #joins the strings in the list
        l=len(string) #now defined as length of string
        stack=[]
        for i,w in enumerate(dna_list): #keeps track of how many iterations have occured
            t=set(range(len(dna_list))) #stores dna_list range as one variable
            t.remove(i)
            stack.append((w,i,t)) #adds dna_list to the stack list
        while stack:
            a,c,remain=stack.pop() #removes last element/remaing element of list
            if len(a)<l:
                if not remain: #parts that aren't removed are put in string
                    string=a
                    l=len(string)
                else:
                    t=[[dic[c,x],x] for x in remain] #overlaps common points of string
                    t.sort() #string sorted in specific order
                    for d,x in t:
                        na=a+dna_list[x][d:]
                        nremain=set(remain)
                        nremain.remove(x)
                        stack.append((na,x,nremain)) #removes excess loops and leaves remaining superstring
        return string 
